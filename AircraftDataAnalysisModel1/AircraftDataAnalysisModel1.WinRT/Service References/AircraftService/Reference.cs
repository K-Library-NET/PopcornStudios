//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18449
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 11.0.50727.1
// 
namespace AircraftDataAnalysisModel1.WinRT.AircraftService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AircraftModel", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class AircraftModel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CaptionField;
        
        private System.DateTime LastUsedField;
        
        private string ModelNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Caption {
            get {
                return this.CaptionField;
            }
            set {
                if ((object.ReferenceEquals(this.CaptionField, value) != true)) {
                    this.CaptionField = value;
                    this.RaisePropertyChanged("Caption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUsed {
            get {
                return this.LastUsedField;
            }
            set {
                if ((this.LastUsedField.Equals(value) != true)) {
                    this.LastUsedField = value;
                    this.RaisePropertyChanged("LastUsed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModelName {
            get {
                return this.ModelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelNameField, value) != true)) {
                    this.ModelNameField = value;
                    this.RaisePropertyChanged("ModelName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Flight", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class Flight : object, System.ComponentModel.INotifyPropertyChanged {
        
        private AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftInstance AircraftField;
        
        private int EndSecondField;
        
        private System.DateTime FlightDateField;
        
        private string FlightIDField;
        
        private string FlightNameField;
        
        private System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.GlobeData> GlobeDatasField;
        
        private int StartSecondField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftInstance Aircraft {
            get {
                return this.AircraftField;
            }
            set {
                if ((object.ReferenceEquals(this.AircraftField, value) != true)) {
                    this.AircraftField = value;
                    this.RaisePropertyChanged("Aircraft");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EndSecond {
            get {
                return this.EndSecondField;
            }
            set {
                if ((this.EndSecondField.Equals(value) != true)) {
                    this.EndSecondField = value;
                    this.RaisePropertyChanged("EndSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FlightDate {
            get {
                return this.FlightDateField;
            }
            set {
                if ((this.FlightDateField.Equals(value) != true)) {
                    this.FlightDateField = value;
                    this.RaisePropertyChanged("FlightDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightID {
            get {
                return this.FlightIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightIDField, value) != true)) {
                    this.FlightIDField = value;
                    this.RaisePropertyChanged("FlightID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightName {
            get {
                return this.FlightNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightNameField, value) != true)) {
                    this.FlightNameField = value;
                    this.RaisePropertyChanged("FlightName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.GlobeData> GlobeDatas {
            get {
                return this.GlobeDatasField;
            }
            set {
                if ((object.ReferenceEquals(this.GlobeDatasField, value) != true)) {
                    this.GlobeDatasField = value;
                    this.RaisePropertyChanged("GlobeDatas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartSecond {
            get {
                return this.StartSecondField;
            }
            set {
                if ((this.StartSecondField.Equals(value) != true)) {
                    this.StartSecondField = value;
                    this.RaisePropertyChanged("StartSecond");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AircraftInstance", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class AircraftInstance : object, System.ComponentModel.INotifyPropertyChanged {
        
        private AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel AircraftModelField;
        
        private string AircraftNumberField;
        
        private System.DateTime LastUsedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel AircraftModel {
            get {
                return this.AircraftModelField;
            }
            set {
                if ((object.ReferenceEquals(this.AircraftModelField, value) != true)) {
                    this.AircraftModelField = value;
                    this.RaisePropertyChanged("AircraftModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AircraftNumber {
            get {
                return this.AircraftNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.AircraftNumberField, value) != true)) {
                    this.AircraftNumberField = value;
                    this.RaisePropertyChanged("AircraftNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUsed {
            get {
                return this.LastUsedField;
            }
            set {
                if ((this.LastUsedField.Equals(value) != true)) {
                    this.LastUsedField = value;
                    this.RaisePropertyChanged("LastUsed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GlobeData", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class GlobeData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AircraftModelNameField;
        
        private string FlightIDField;
        
        private int IndexField;
        
        private float LatitudeField;
        
        private float LongitudeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AircraftModelName {
            get {
                return this.AircraftModelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AircraftModelNameField, value) != true)) {
                    this.AircraftModelNameField = value;
                    this.RaisePropertyChanged("AircraftModelName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightID {
            get {
                return this.FlightIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightIDField, value) != true)) {
                    this.FlightIDField = value;
                    this.RaisePropertyChanged("FlightID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Index {
            get {
                return this.IndexField;
            }
            set {
                if ((this.IndexField.Equals(value) != true)) {
                    this.IndexField = value;
                    this.RaisePropertyChanged("Index");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FlightRawData", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class FlightRawData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ParameterIDField;
        
        private int SecondField;
        
        private System.Collections.ObjectModel.ObservableCollection<float> ValuesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterID {
            get {
                return this.ParameterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterIDField, value) != true)) {
                    this.ParameterIDField = value;
                    this.RaisePropertyChanged("ParameterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Second {
            get {
                return this.SecondField;
            }
            set {
                if ((this.SecondField.Equals(value) != true)) {
                    this.SecondField = value;
                    this.RaisePropertyChanged("Second");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<float> Values {
            get {
                return this.ValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ValuesField, value) != true)) {
                    this.ValuesField = value;
                    this.RaisePropertyChanged("Values");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChartPanel", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities.Charts")]
    public partial class ChartPanel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string PanelIDField;
        
        private string PanelNameField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> ParameterIDsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PanelID {
            get {
                return this.PanelIDField;
            }
            set {
                if ((object.ReferenceEquals(this.PanelIDField, value) != true)) {
                    this.PanelIDField = value;
                    this.RaisePropertyChanged("PanelID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PanelName {
            get {
                return this.PanelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PanelNameField, value) != true)) {
                    this.PanelNameField = value;
                    this.RaisePropertyChanged("PanelName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> ParameterIDs {
            get {
                return this.ParameterIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterIDsField, value) != true)) {
                    this.ParameterIDsField = value;
                    this.RaisePropertyChanged("ParameterIDs");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FlightParameters", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class FlightParameters : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int BytesCountField;
        
        private System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.FlightParameter> ParametersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BytesCount {
            get {
                return this.BytesCountField;
            }
            set {
                if ((this.BytesCountField.Equals(value) != true)) {
                    this.BytesCountField = value;
                    this.RaisePropertyChanged("BytesCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.FlightParameter> Parameters {
            get {
                return this.ParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersField, value) != true)) {
                    this.ParametersField = value;
                    this.RaisePropertyChanged("Parameters");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FlightParameter", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class FlightParameter : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.ByteIndex> ByteIndexesField;
        
        private string CaptionField;
        
        private int FrequenceField;
        
        private int IndexField;
        
        private string ModelNameField;
        
        private string ParameterDataTypeField;
        
        private string ParameterIDField;
        
        private int SubIndexField;
        
        private string UnitField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.ByteIndex> ByteIndexes {
            get {
                return this.ByteIndexesField;
            }
            set {
                if ((object.ReferenceEquals(this.ByteIndexesField, value) != true)) {
                    this.ByteIndexesField = value;
                    this.RaisePropertyChanged("ByteIndexes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Caption {
            get {
                return this.CaptionField;
            }
            set {
                if ((object.ReferenceEquals(this.CaptionField, value) != true)) {
                    this.CaptionField = value;
                    this.RaisePropertyChanged("Caption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Frequence {
            get {
                return this.FrequenceField;
            }
            set {
                if ((this.FrequenceField.Equals(value) != true)) {
                    this.FrequenceField = value;
                    this.RaisePropertyChanged("Frequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Index {
            get {
                return this.IndexField;
            }
            set {
                if ((this.IndexField.Equals(value) != true)) {
                    this.IndexField = value;
                    this.RaisePropertyChanged("Index");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModelName {
            get {
                return this.ModelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelNameField, value) != true)) {
                    this.ModelNameField = value;
                    this.RaisePropertyChanged("ModelName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterDataType {
            get {
                return this.ParameterDataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterDataTypeField, value) != true)) {
                    this.ParameterDataTypeField = value;
                    this.RaisePropertyChanged("ParameterDataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterID {
            get {
                return this.ParameterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterIDField, value) != true)) {
                    this.ParameterIDField = value;
                    this.RaisePropertyChanged("ParameterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SubIndex {
            get {
                return this.SubIndexField;
            }
            set {
                if ((this.SubIndexField.Equals(value) != true)) {
                    this.SubIndexField = value;
                    this.RaisePropertyChanged("SubIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitField, value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ByteIndex", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class ByteIndex : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IndexField;
        
        private System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.BitIndex> SubIndexesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Index {
            get {
                return this.IndexField;
            }
            set {
                if ((this.IndexField.Equals(value) != true)) {
                    this.IndexField = value;
                    this.RaisePropertyChanged("Index");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.BitIndex> SubIndexes {
            get {
                return this.SubIndexesField;
            }
            set {
                if ((object.ReferenceEquals(this.SubIndexesField, value) != true)) {
                    this.SubIndexesField = value;
                    this.RaisePropertyChanged("SubIndexes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BitIndex", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class BitIndex : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int SubIndexField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SubIndex {
            get {
                return this.SubIndexField;
            }
            set {
                if ((this.SubIndexField.Equals(value) != true)) {
                    this.SubIndexField = value;
                    this.RaisePropertyChanged("SubIndex");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Decision", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities.Decisions")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AircraftDataAnalysisModel1.WinRT.AircraftService.FlightConditionDecision))]
    public partial class Decision : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.SubCondition> ConditionsField;
        
        private string DecisionDescriptionStringTemplateField;
        
        private string DecisionIDField;
        
        private string DecisionNameField;
        
        private int EventLevelField;
        
        private int LastTimeField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> RelatedParametersField;
        
        private string SolutionInstructionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.SubCondition> Conditions {
            get {
                return this.ConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionsField, value) != true)) {
                    this.ConditionsField = value;
                    this.RaisePropertyChanged("Conditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DecisionDescriptionStringTemplate {
            get {
                return this.DecisionDescriptionStringTemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.DecisionDescriptionStringTemplateField, value) != true)) {
                    this.DecisionDescriptionStringTemplateField = value;
                    this.RaisePropertyChanged("DecisionDescriptionStringTemplate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DecisionID {
            get {
                return this.DecisionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.DecisionIDField, value) != true)) {
                    this.DecisionIDField = value;
                    this.RaisePropertyChanged("DecisionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DecisionName {
            get {
                return this.DecisionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DecisionNameField, value) != true)) {
                    this.DecisionNameField = value;
                    this.RaisePropertyChanged("DecisionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventLevel {
            get {
                return this.EventLevelField;
            }
            set {
                if ((this.EventLevelField.Equals(value) != true)) {
                    this.EventLevelField = value;
                    this.RaisePropertyChanged("EventLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LastTime {
            get {
                return this.LastTimeField;
            }
            set {
                if ((this.LastTimeField.Equals(value) != true)) {
                    this.LastTimeField = value;
                    this.RaisePropertyChanged("LastTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> RelatedParameters {
            get {
                return this.RelatedParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.RelatedParametersField, value) != true)) {
                    this.RelatedParametersField = value;
                    this.RaisePropertyChanged("RelatedParameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SolutionInstruction {
            get {
                return this.SolutionInstructionField;
            }
            set {
                if ((object.ReferenceEquals(this.SolutionInstructionField, value) != true)) {
                    this.SolutionInstructionField = value;
                    this.RaisePropertyChanged("SolutionInstruction");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FlightConditionDecision", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities.Decisions")]
    public partial class FlightConditionDecision : AircraftDataAnalysisModel1.WinRT.AircraftService.Decision {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubCondition", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities.Decisions")]
    public partial class SubCondition : object, System.ComponentModel.INotifyPropertyChanged {
        
        private AircraftDataAnalysisModel1.WinRT.AircraftService.SubConditionType ConditionTypeField;
        
        private AircraftDataAnalysisModel1.WinRT.AircraftService.CompareOperator OperatorField;
        
        private string ParameterIDField;
        
        private float ParameterValueField;
        
        private AircraftDataAnalysisModel1.WinRT.AircraftService.ConditionRelation RelationField;
        
        private AircraftDataAnalysisModel1.WinRT.AircraftService.Decision RootDecisionField;
        
        private System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.SubCondition> SubConditionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AircraftDataAnalysisModel1.WinRT.AircraftService.SubConditionType ConditionType {
            get {
                return this.ConditionTypeField;
            }
            set {
                if ((this.ConditionTypeField.Equals(value) != true)) {
                    this.ConditionTypeField = value;
                    this.RaisePropertyChanged("ConditionType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AircraftDataAnalysisModel1.WinRT.AircraftService.CompareOperator Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((this.OperatorField.Equals(value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterID {
            get {
                return this.ParameterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterIDField, value) != true)) {
                    this.ParameterIDField = value;
                    this.RaisePropertyChanged("ParameterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float ParameterValue {
            get {
                return this.ParameterValueField;
            }
            set {
                if ((this.ParameterValueField.Equals(value) != true)) {
                    this.ParameterValueField = value;
                    this.RaisePropertyChanged("ParameterValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AircraftDataAnalysisModel1.WinRT.AircraftService.ConditionRelation Relation {
            get {
                return this.RelationField;
            }
            set {
                if ((this.RelationField.Equals(value) != true)) {
                    this.RelationField = value;
                    this.RaisePropertyChanged("Relation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AircraftDataAnalysisModel1.WinRT.AircraftService.Decision RootDecision {
            get {
                return this.RootDecisionField;
            }
            set {
                if ((object.ReferenceEquals(this.RootDecisionField, value) != true)) {
                    this.RootDecisionField = value;
                    this.RaisePropertyChanged("RootDecision");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.SubCondition> SubConditions {
            get {
                return this.SubConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.SubConditionsField, value) != true)) {
                    this.SubConditionsField = value;
                    this.RaisePropertyChanged("SubConditions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubConditionType", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities.Decisions")]
    public enum SubConditionType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Compare = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeltaRate = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompareOperator", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities.Decisions")]
    public enum CompareOperator : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Equal = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotEqual = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GreaterThan = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GreaterOrEqual = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SmallerThan = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SmallerOrEqual = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConditionRelation", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities.Decisions")]
    public enum ConditionRelation : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AND = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OR = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LevelTopFlightRecord", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class LevelTopFlightRecord : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int EndSecondField;
        
        private AircraftDataAnalysisModel1.WinRT.AircraftService.ExtremumPointInfo ExtremumPointInfoField;
        
        private string FlightIDField;
        
        private System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.Level2FlightRecord> Level2FlightRecordField;
        
        private string ParameterIDField;
        
        private int StartSecondField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EndSecond {
            get {
                return this.EndSecondField;
            }
            set {
                if ((this.EndSecondField.Equals(value) != true)) {
                    this.EndSecondField = value;
                    this.RaisePropertyChanged("EndSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AircraftDataAnalysisModel1.WinRT.AircraftService.ExtremumPointInfo ExtremumPointInfo {
            get {
                return this.ExtremumPointInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtremumPointInfoField, value) != true)) {
                    this.ExtremumPointInfoField = value;
                    this.RaisePropertyChanged("ExtremumPointInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightID {
            get {
                return this.FlightIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightIDField, value) != true)) {
                    this.FlightIDField = value;
                    this.RaisePropertyChanged("FlightID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.Level2FlightRecord> Level2FlightRecord {
            get {
                return this.Level2FlightRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.Level2FlightRecordField, value) != true)) {
                    this.Level2FlightRecordField = value;
                    this.RaisePropertyChanged("Level2FlightRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterID {
            get {
                return this.ParameterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterIDField, value) != true)) {
                    this.ParameterIDField = value;
                    this.RaisePropertyChanged("ParameterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartSecond {
            get {
                return this.StartSecondField;
            }
            set {
                if ((this.StartSecondField.Equals(value) != true)) {
                    this.StartSecondField = value;
                    this.RaisePropertyChanged("StartSecond");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExtremumPointInfo", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class ExtremumPointInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AircraftNumberField;
        
        private System.DateTime FlightDateTimeField;
        
        private string FlightIDField;
        
        private float MaxValueField;
        
        private float MaxValueSecondField;
        
        private float MinValueField;
        
        private float MinValueSecondField;
        
        private string ParameterIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AircraftNumber {
            get {
                return this.AircraftNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.AircraftNumberField, value) != true)) {
                    this.AircraftNumberField = value;
                    this.RaisePropertyChanged("AircraftNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FlightDateTime {
            get {
                return this.FlightDateTimeField;
            }
            set {
                if ((this.FlightDateTimeField.Equals(value) != true)) {
                    this.FlightDateTimeField = value;
                    this.RaisePropertyChanged("FlightDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightID {
            get {
                return this.FlightIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightIDField, value) != true)) {
                    this.FlightIDField = value;
                    this.RaisePropertyChanged("FlightID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MaxValue {
            get {
                return this.MaxValueField;
            }
            set {
                if ((this.MaxValueField.Equals(value) != true)) {
                    this.MaxValueField = value;
                    this.RaisePropertyChanged("MaxValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MaxValueSecond {
            get {
                return this.MaxValueSecondField;
            }
            set {
                if ((this.MaxValueSecondField.Equals(value) != true)) {
                    this.MaxValueSecondField = value;
                    this.RaisePropertyChanged("MaxValueSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MinValue {
            get {
                return this.MinValueField;
            }
            set {
                if ((this.MinValueField.Equals(value) != true)) {
                    this.MinValueField = value;
                    this.RaisePropertyChanged("MinValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MinValueSecond {
            get {
                return this.MinValueSecondField;
            }
            set {
                if ((this.MinValueSecondField.Equals(value) != true)) {
                    this.MinValueSecondField = value;
                    this.RaisePropertyChanged("MinValueSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterID {
            get {
                return this.ParameterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterIDField, value) != true)) {
                    this.ParameterIDField = value;
                    this.RaisePropertyChanged("ParameterID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Level2FlightRecord", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class Level2FlightRecord : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int EndSecondField;
        
        private AircraftDataAnalysisModel1.WinRT.AircraftService.ExtremumPointInfo ExtremumPointInfoField;
        
        private string FlightIDField;
        
        private string ParameterIDField;
        
        private int StartSecondField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EndSecond {
            get {
                return this.EndSecondField;
            }
            set {
                if ((this.EndSecondField.Equals(value) != true)) {
                    this.EndSecondField = value;
                    this.RaisePropertyChanged("EndSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AircraftDataAnalysisModel1.WinRT.AircraftService.ExtremumPointInfo ExtremumPointInfo {
            get {
                return this.ExtremumPointInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtremumPointInfoField, value) != true)) {
                    this.ExtremumPointInfoField = value;
                    this.RaisePropertyChanged("ExtremumPointInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightID {
            get {
                return this.FlightIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightIDField, value) != true)) {
                    this.FlightIDField = value;
                    this.RaisePropertyChanged("FlightID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterID {
            get {
                return this.ParameterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterIDField, value) != true)) {
                    this.ParameterIDField = value;
                    this.RaisePropertyChanged("ParameterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartSecond {
            get {
                return this.StartSecondField;
            }
            set {
                if ((this.StartSecondField.Equals(value) != true)) {
                    this.StartSecondField = value;
                    this.RaisePropertyChanged("StartSecond");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DecisionRecord", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities.Decisions")]
    public partial class DecisionRecord : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DecisionDescriptionField;
        
        private string DecisionIDField;
        
        private string DecisionNameField;
        
        private int EndSecondField;
        
        private int EventLevelField;
        
        private string FlightIDField;
        
        private int HappenSecondField;
        
        private int StartSecondField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DecisionDescription {
            get {
                return this.DecisionDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DecisionDescriptionField, value) != true)) {
                    this.DecisionDescriptionField = value;
                    this.RaisePropertyChanged("DecisionDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DecisionID {
            get {
                return this.DecisionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.DecisionIDField, value) != true)) {
                    this.DecisionIDField = value;
                    this.RaisePropertyChanged("DecisionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DecisionName {
            get {
                return this.DecisionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DecisionNameField, value) != true)) {
                    this.DecisionNameField = value;
                    this.RaisePropertyChanged("DecisionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EndSecond {
            get {
                return this.EndSecondField;
            }
            set {
                if ((this.EndSecondField.Equals(value) != true)) {
                    this.EndSecondField = value;
                    this.RaisePropertyChanged("EndSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventLevel {
            get {
                return this.EventLevelField;
            }
            set {
                if ((this.EventLevelField.Equals(value) != true)) {
                    this.EventLevelField = value;
                    this.RaisePropertyChanged("EventLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightID {
            get {
                return this.FlightIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightIDField, value) != true)) {
                    this.FlightIDField = value;
                    this.RaisePropertyChanged("FlightID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HappenSecond {
            get {
                return this.HappenSecondField;
            }
            set {
                if ((this.HappenSecondField.Equals(value) != true)) {
                    this.HappenSecondField = value;
                    this.RaisePropertyChanged("HappenSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartSecond {
            get {
                return this.StartSecondField;
            }
            set {
                if ((this.StartSecondField.Equals(value) != true)) {
                    this.StartSecondField = value;
                    this.RaisePropertyChanged("StartSecond");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExtremumReportDefinition", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class ExtremumReportDefinition : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AircraftModelNameField;
        
        private System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.ExtremumReportItemDefinition> ItemsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AircraftModelName {
            get {
                return this.AircraftModelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AircraftModelNameField, value) != true)) {
                    this.AircraftModelNameField = value;
                    this.RaisePropertyChanged("AircraftModelName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.ExtremumReportItemDefinition> Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExtremumReportItemDefinition", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class ExtremumReportItemDefinition : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int NumberField;
        
        private string ParameterIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterID {
            get {
                return this.ParameterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterIDField, value) != true)) {
                    this.ParameterIDField = value;
                    this.RaisePropertyChanged("ParameterID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FlightRawDataRelationPoint", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class FlightRawDataRelationPoint : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime FlightDateField;
        
        private string FlightIDField;
        
        private AircraftDataAnalysisModel1.WinRT.AircraftService.ObjectId IdField;
        
        private string XAxisParameterIDField;
        
        private double XAxisParameterValueField;
        
        private string YAxisParameterIDField;
        
        private double YAxisParameterValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FlightDate {
            get {
                return this.FlightDateField;
            }
            set {
                if ((this.FlightDateField.Equals(value) != true)) {
                    this.FlightDateField = value;
                    this.RaisePropertyChanged("FlightDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightID {
            get {
                return this.FlightIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightIDField, value) != true)) {
                    this.FlightIDField = value;
                    this.RaisePropertyChanged("FlightID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AircraftDataAnalysisModel1.WinRT.AircraftService.ObjectId Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XAxisParameterID {
            get {
                return this.XAxisParameterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.XAxisParameterIDField, value) != true)) {
                    this.XAxisParameterIDField = value;
                    this.RaisePropertyChanged("XAxisParameterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double XAxisParameterValue {
            get {
                return this.XAxisParameterValueField;
            }
            set {
                if ((this.XAxisParameterValueField.Equals(value) != true)) {
                    this.XAxisParameterValueField = value;
                    this.RaisePropertyChanged("XAxisParameterValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string YAxisParameterID {
            get {
                return this.YAxisParameterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.YAxisParameterIDField, value) != true)) {
                    this.YAxisParameterIDField = value;
                    this.RaisePropertyChanged("YAxisParameterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double YAxisParameterValue {
            get {
                return this.YAxisParameterValueField;
            }
            set {
                if ((this.YAxisParameterValueField.Equals(value) != true)) {
                    this.YAxisParameterValueField = value;
                    this.RaisePropertyChanged("YAxisParameterValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ObjectId", Namespace="http://schemas.datacontract.org/2004/07/MongoDB.Bson")]
    public partial struct ObjectId : System.ComponentModel.INotifyPropertyChanged {
        
        private int _incrementField;
        
        private int _machineField;
        
        private short _pidField;
        
        private int _timestampField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _increment {
            get {
                return this._incrementField;
            }
            set {
                if ((this._incrementField.Equals(value) != true)) {
                    this._incrementField = value;
                    this.RaisePropertyChanged("_increment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _machine {
            get {
                return this._machineField;
            }
            set {
                if ((this._machineField.Equals(value) != true)) {
                    this._machineField = value;
                    this.RaisePropertyChanged("_machine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short _pid {
            get {
                return this._pidField;
            }
            set {
                if ((this._pidField.Equals(value) != true)) {
                    this._pidField = value;
                    this.RaisePropertyChanged("_pid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _timestamp {
            get {
                return this._timestampField;
            }
            set {
                if ((this._timestampField.Equals(value) != true)) {
                    this._timestampField = value;
                    this.RaisePropertyChanged("_timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AircraftService.IAircraftService")]
    public interface IAircraftService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetCurrentAircraftModel", ReplyAction="http://tempuri.org/IAircraftService/GetCurrentAircraftModelResponse")]
        System.Threading.Tasks.Task<AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel> GetCurrentAircraftModelAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllFlights", ReplyAction="http://tempuri.org/IAircraftService/GetAllFlightsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.Flight>> GetAllFlightsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllFlightsByInstance", ReplyAction="http://tempuri.org/IAircraftService/GetAllFlightsByInstanceResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.Flight>> GetAllFlightsByInstanceAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel model, AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftInstance aircraftInstance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetFlightData", ReplyAction="http://tempuri.org/IAircraftService/GetFlightDataResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.KeyValuePair<string, System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.FlightRawData>>>> GetFlightDataAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.Flight flight, System.Collections.ObjectModel.ObservableCollection<string> parameterIds, int startSecond, int endSecond);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllChartPanels", ReplyAction="http://tempuri.org/IAircraftService/GetAllChartPanelsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.ChartPanel>> GetAllChartPanelsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel aircraftModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllFlightParameters", ReplyAction="http://tempuri.org/IAircraftService/GetAllFlightParametersResponse")]
        System.Threading.Tasks.Task<AircraftDataAnalysisModel1.WinRT.AircraftService.FlightParameters> GetAllFlightParametersAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel aircraftModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllDecisions", ReplyAction="http://tempuri.org/IAircraftService/GetAllDecisionsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.Decision>> GetAllDecisionsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel aircraftModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetLevelTopFlightRecords", ReplyAction="http://tempuri.org/IAircraftService/GetLevelTopFlightRecordsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.LevelTopFlightRecord>> GetLevelTopFlightRecordsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.Flight flight, System.Collections.ObjectModel.ObservableCollection<string> parameterIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetDecisionRecords", ReplyAction="http://tempuri.org/IAircraftService/GetDecisionRecordsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.DecisionRecord>> GetDecisionRecordsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.Flight flight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetExtremumReportDefinition", ReplyAction="http://tempuri.org/IAircraftService/GetExtremumReportDefinitionResponse")]
        System.Threading.Tasks.Task<AircraftDataAnalysisModel1.WinRT.AircraftService.ExtremumReportDefinition> GetExtremumReportDefinitionAsync(string aircraftModelName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllFlightConditionDecisions", ReplyAction="http://tempuri.org/IAircraftService/GetAllFlightConditionDecisionsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.FlightConditionDecision>> GetAllFlightConditionDecisionsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel aircraft);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetFlightRawDataRelationPoints", ReplyAction="http://tempuri.org/IAircraftService/GetFlightRawDataRelationPointsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.FlightRawDataRelationPoint>> GetFlightRawDataRelationPointsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel aircraft, string flightID, string XAxisParameterID, string YAxisParameterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetExtremumPointInfosByAircraftInstance", ReplyAction="http://tempuri.org/IAircraftService/GetExtremumPointInfosByAircraftInstanceRespon" +
            "se")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.ExtremumPointInfo>> GetExtremumPointInfosByAircraftInstanceAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftInstance aircraftInstance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetGlobeDatas", ReplyAction="http://tempuri.org/IAircraftService/GetGlobeDatasResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.GlobeData>> GetGlobeDatasAsync(string flightID, AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel model, int startIndex, int endIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllAircrafts", ReplyAction="http://tempuri.org/IAircraftService/GetAllAircraftsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftInstance>> GetAllAircraftsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetEarliestYear", ReplyAction="http://tempuri.org/IAircraftService/GetEarliestYearResponse")]
        System.Threading.Tasks.Task<int> GetEarliestYearAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetFlightConditionDecisionRecords", ReplyAction="http://tempuri.org/IAircraftService/GetFlightConditionDecisionRecordsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.DecisionRecord>> GetFlightConditionDecisionRecordsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel model, System.DateTime startYearMonth, System.DateTime endYearMonth, System.Collections.ObjectModel.ObservableCollection<string> aircraftNumbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAppConfigValue", ReplyAction="http://tempuri.org/IAircraftService/GetAppConfigValueResponse")]
        System.Threading.Tasks.Task<string> GetAppConfigValueAsync(string appKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAircraftServiceChannel : AircraftDataAnalysisModel1.WinRT.AircraftService.IAircraftService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AircraftServiceClient : System.ServiceModel.ClientBase<AircraftDataAnalysisModel1.WinRT.AircraftService.IAircraftService>, AircraftDataAnalysisModel1.WinRT.AircraftService.IAircraftService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AircraftServiceClient() : 
                base(AircraftServiceClient.GetDefaultBinding(), AircraftServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IAircraftService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AircraftServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(AircraftServiceClient.GetBindingForEndpoint(endpointConfiguration), AircraftServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AircraftServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AircraftServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AircraftServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AircraftServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AircraftServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel> GetCurrentAircraftModelAsync() {
            return base.Channel.GetCurrentAircraftModelAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.Flight>> GetAllFlightsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel model) {
            return base.Channel.GetAllFlightsAsync(model);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.Flight>> GetAllFlightsByInstanceAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel model, AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftInstance aircraftInstance) {
            return base.Channel.GetAllFlightsByInstanceAsync(model, aircraftInstance);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.KeyValuePair<string, System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.FlightRawData>>>> GetFlightDataAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.Flight flight, System.Collections.ObjectModel.ObservableCollection<string> parameterIds, int startSecond, int endSecond) {
            return base.Channel.GetFlightDataAsync(flight, parameterIds, startSecond, endSecond);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.ChartPanel>> GetAllChartPanelsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel aircraftModel) {
            return base.Channel.GetAllChartPanelsAsync(aircraftModel);
        }
        
        public System.Threading.Tasks.Task<AircraftDataAnalysisModel1.WinRT.AircraftService.FlightParameters> GetAllFlightParametersAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel aircraftModel) {
            return base.Channel.GetAllFlightParametersAsync(aircraftModel);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.Decision>> GetAllDecisionsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel aircraftModel) {
            return base.Channel.GetAllDecisionsAsync(aircraftModel);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.LevelTopFlightRecord>> GetLevelTopFlightRecordsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.Flight flight, System.Collections.ObjectModel.ObservableCollection<string> parameterIds) {
            return base.Channel.GetLevelTopFlightRecordsAsync(flight, parameterIds);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.DecisionRecord>> GetDecisionRecordsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.Flight flight) {
            return base.Channel.GetDecisionRecordsAsync(flight);
        }
        
        public System.Threading.Tasks.Task<AircraftDataAnalysisModel1.WinRT.AircraftService.ExtremumReportDefinition> GetExtremumReportDefinitionAsync(string aircraftModelName) {
            return base.Channel.GetExtremumReportDefinitionAsync(aircraftModelName);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.FlightConditionDecision>> GetAllFlightConditionDecisionsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel aircraft) {
            return base.Channel.GetAllFlightConditionDecisionsAsync(aircraft);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.FlightRawDataRelationPoint>> GetFlightRawDataRelationPointsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel aircraft, string flightID, string XAxisParameterID, string YAxisParameterID) {
            return base.Channel.GetFlightRawDataRelationPointsAsync(aircraft, flightID, XAxisParameterID, YAxisParameterID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.ExtremumPointInfo>> GetExtremumPointInfosByAircraftInstanceAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftInstance aircraftInstance) {
            return base.Channel.GetExtremumPointInfosByAircraftInstanceAsync(aircraftInstance);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.GlobeData>> GetGlobeDatasAsync(string flightID, AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel model, int startIndex, int endIndex) {
            return base.Channel.GetGlobeDatasAsync(flightID, model, startIndex, endIndex);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftInstance>> GetAllAircraftsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel model) {
            return base.Channel.GetAllAircraftsAsync(model);
        }
        
        public System.Threading.Tasks.Task<int> GetEarliestYearAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel model) {
            return base.Channel.GetEarliestYearAsync(model);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisModel1.WinRT.AircraftService.DecisionRecord>> GetFlightConditionDecisionRecordsAsync(AircraftDataAnalysisModel1.WinRT.AircraftService.AircraftModel model, System.DateTime startYearMonth, System.DateTime endYearMonth, System.Collections.ObjectModel.ObservableCollection<string> aircraftNumbers) {
            return base.Channel.GetFlightConditionDecisionRecordsAsync(model, startYearMonth, endYearMonth, aircraftNumbers);
        }
        
        public System.Threading.Tasks.Task<string> GetAppConfigValueAsync(string appKey) {
            return base.Channel.GetAppConfigValueAsync(appKey);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAircraftService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAircraftService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:65214/AircraftService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return AircraftServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IAircraftService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return AircraftServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IAircraftService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IAircraftService,
        }
    }
}
