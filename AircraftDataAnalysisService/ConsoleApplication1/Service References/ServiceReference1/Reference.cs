//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApplication1.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAircraftService")]
    public interface IAircraftService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetCurrentAircraftModel", ReplyAction="http://tempuri.org/IAircraftService/GetCurrentAircraftModelResponse")]
        FlightDataEntities.AircraftModel GetCurrentAircraftModel();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetCurrentAircraftModel", ReplyAction="http://tempuri.org/IAircraftService/GetCurrentAircraftModelResponse")]
        System.Threading.Tasks.Task<FlightDataEntities.AircraftModel> GetCurrentAircraftModelAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllFlights", ReplyAction="http://tempuri.org/IAircraftService/GetAllFlightsResponse")]
        FlightDataEntities.Flight[] GetAllFlights(FlightDataEntities.AircraftModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllFlights", ReplyAction="http://tempuri.org/IAircraftService/GetAllFlightsResponse")]
        System.Threading.Tasks.Task<FlightDataEntities.Flight[]> GetAllFlightsAsync(FlightDataEntities.AircraftModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetFlightData", ReplyAction="http://tempuri.org/IAircraftService/GetFlightDataResponse")]
        System.Collections.Generic.KeyValuePair<string, FlightDataEntities.FlightRawData[]>[] GetFlightData(FlightDataEntities.Flight flight, string[] parameterIds, int startSecond, int endSecond);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetFlightData", ReplyAction="http://tempuri.org/IAircraftService/GetFlightDataResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, FlightDataEntities.FlightRawData[]>[]> GetFlightDataAsync(FlightDataEntities.Flight flight, string[] parameterIds, int startSecond, int endSecond);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllChartPanels", ReplyAction="http://tempuri.org/IAircraftService/GetAllChartPanelsResponse")]
        FlightDataEntities.Charts.ChartPanel[] GetAllChartPanels(FlightDataEntities.AircraftModel aircraftModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllChartPanels", ReplyAction="http://tempuri.org/IAircraftService/GetAllChartPanelsResponse")]
        System.Threading.Tasks.Task<FlightDataEntities.Charts.ChartPanel[]> GetAllChartPanelsAsync(FlightDataEntities.AircraftModel aircraftModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllFlightParameters", ReplyAction="http://tempuri.org/IAircraftService/GetAllFlightParametersResponse")]
        FlightDataEntities.FlightParameters GetAllFlightParameters(FlightDataEntities.AircraftModel aircraftModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllFlightParameters", ReplyAction="http://tempuri.org/IAircraftService/GetAllFlightParametersResponse")]
        System.Threading.Tasks.Task<FlightDataEntities.FlightParameters> GetAllFlightParametersAsync(FlightDataEntities.AircraftModel aircraftModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllDecisions", ReplyAction="http://tempuri.org/IAircraftService/GetAllDecisionsResponse")]
        FlightDataEntities.Decisions.Decision[] GetAllDecisions(FlightDataEntities.AircraftModel aircraftModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllDecisions", ReplyAction="http://tempuri.org/IAircraftService/GetAllDecisionsResponse")]
        System.Threading.Tasks.Task<FlightDataEntities.Decisions.Decision[]> GetAllDecisionsAsync(FlightDataEntities.AircraftModel aircraftModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetLevelTopFlightRecords", ReplyAction="http://tempuri.org/IAircraftService/GetLevelTopFlightRecordsResponse")]
        FlightDataEntities.LevelTopFlightRecord[] GetLevelTopFlightRecords(FlightDataEntities.Flight flight, string[] parameterIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetLevelTopFlightRecords", ReplyAction="http://tempuri.org/IAircraftService/GetLevelTopFlightRecordsResponse")]
        System.Threading.Tasks.Task<FlightDataEntities.LevelTopFlightRecord[]> GetLevelTopFlightRecordsAsync(FlightDataEntities.Flight flight, string[] parameterIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetDecisionRecords", ReplyAction="http://tempuri.org/IAircraftService/GetDecisionRecordsResponse")]
        FlightDataEntities.Decisions.DecisionRecord[] GetDecisionRecords(FlightDataEntities.Flight flight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetDecisionRecords", ReplyAction="http://tempuri.org/IAircraftService/GetDecisionRecordsResponse")]
        System.Threading.Tasks.Task<FlightDataEntities.Decisions.DecisionRecord[]> GetDecisionRecordsAsync(FlightDataEntities.Flight flight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetExtremumReportDefinition", ReplyAction="http://tempuri.org/IAircraftService/GetExtremumReportDefinitionResponse")]
        FlightDataEntities.ExtremumReportDefinition GetExtremumReportDefinition(string aircraftModelName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetExtremumReportDefinition", ReplyAction="http://tempuri.org/IAircraftService/GetExtremumReportDefinitionResponse")]
        System.Threading.Tasks.Task<FlightDataEntities.ExtremumReportDefinition> GetExtremumReportDefinitionAsync(string aircraftModelName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAircraftServiceChannel : ConsoleApplication1.ServiceReference1.IAircraftService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AircraftServiceClient : System.ServiceModel.ClientBase<ConsoleApplication1.ServiceReference1.IAircraftService>, ConsoleApplication1.ServiceReference1.IAircraftService {
        
        public AircraftServiceClient() {
        }
        
        public AircraftServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AircraftServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AircraftServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AircraftServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public FlightDataEntities.AircraftModel GetCurrentAircraftModel() {
            return base.Channel.GetCurrentAircraftModel();
        }
        
        public System.Threading.Tasks.Task<FlightDataEntities.AircraftModel> GetCurrentAircraftModelAsync() {
            return base.Channel.GetCurrentAircraftModelAsync();
        }
        
        public FlightDataEntities.Flight[] GetAllFlights(FlightDataEntities.AircraftModel model) {
            return base.Channel.GetAllFlights(model);
        }
        
        public System.Threading.Tasks.Task<FlightDataEntities.Flight[]> GetAllFlightsAsync(FlightDataEntities.AircraftModel model) {
            return base.Channel.GetAllFlightsAsync(model);
        }
        
        public System.Collections.Generic.KeyValuePair<string, FlightDataEntities.FlightRawData[]>[] GetFlightData(FlightDataEntities.Flight flight, string[] parameterIds, int startSecond, int endSecond) {
            return base.Channel.GetFlightData(flight, parameterIds, startSecond, endSecond);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, FlightDataEntities.FlightRawData[]>[]> GetFlightDataAsync(FlightDataEntities.Flight flight, string[] parameterIds, int startSecond, int endSecond) {
            return base.Channel.GetFlightDataAsync(flight, parameterIds, startSecond, endSecond);
        }
        
        public FlightDataEntities.Charts.ChartPanel[] GetAllChartPanels(FlightDataEntities.AircraftModel aircraftModel) {
            return base.Channel.GetAllChartPanels(aircraftModel);
        }
        
        public System.Threading.Tasks.Task<FlightDataEntities.Charts.ChartPanel[]> GetAllChartPanelsAsync(FlightDataEntities.AircraftModel aircraftModel) {
            return base.Channel.GetAllChartPanelsAsync(aircraftModel);
        }
        
        public FlightDataEntities.FlightParameters GetAllFlightParameters(FlightDataEntities.AircraftModel aircraftModel) {
            return base.Channel.GetAllFlightParameters(aircraftModel);
        }
        
        public System.Threading.Tasks.Task<FlightDataEntities.FlightParameters> GetAllFlightParametersAsync(FlightDataEntities.AircraftModel aircraftModel) {
            return base.Channel.GetAllFlightParametersAsync(aircraftModel);
        }
        
        public FlightDataEntities.Decisions.Decision[] GetAllDecisions(FlightDataEntities.AircraftModel aircraftModel) {
            return base.Channel.GetAllDecisions(aircraftModel);
        }
        
        public System.Threading.Tasks.Task<FlightDataEntities.Decisions.Decision[]> GetAllDecisionsAsync(FlightDataEntities.AircraftModel aircraftModel) {
            return base.Channel.GetAllDecisionsAsync(aircraftModel);
        }
        
        public FlightDataEntities.LevelTopFlightRecord[] GetLevelTopFlightRecords(FlightDataEntities.Flight flight, string[] parameterIds) {
            return base.Channel.GetLevelTopFlightRecords(flight, parameterIds);
        }
        
        public System.Threading.Tasks.Task<FlightDataEntities.LevelTopFlightRecord[]> GetLevelTopFlightRecordsAsync(FlightDataEntities.Flight flight, string[] parameterIds) {
            return base.Channel.GetLevelTopFlightRecordsAsync(flight, parameterIds);
        }
        
        public FlightDataEntities.Decisions.DecisionRecord[] GetDecisionRecords(FlightDataEntities.Flight flight) {
            return base.Channel.GetDecisionRecords(flight);
        }
        
        public System.Threading.Tasks.Task<FlightDataEntities.Decisions.DecisionRecord[]> GetDecisionRecordsAsync(FlightDataEntities.Flight flight) {
            return base.Channel.GetDecisionRecordsAsync(flight);
        }
        
        public FlightDataEntities.ExtremumReportDefinition GetExtremumReportDefinition(string aircraftModelName) {
            return base.Channel.GetExtremumReportDefinition(aircraftModelName);
        }
        
        public System.Threading.Tasks.Task<FlightDataEntities.ExtremumReportDefinition> GetExtremumReportDefinitionAsync(string aircraftModelName) {
            return base.Channel.GetExtremumReportDefinitionAsync(aircraftModelName);
        }
    }
}
