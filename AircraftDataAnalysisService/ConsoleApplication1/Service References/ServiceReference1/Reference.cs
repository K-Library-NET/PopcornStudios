//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18051
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApplication1.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ObjectId", Namespace="http://schemas.datacontract.org/2004/07/MongoDB.Bson")]
    [System.SerializableAttribute()]
    public partial struct ObjectId : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int _incrementField;
        
        private int _machineField;
        
        private short _pidField;
        
        private int _timestampField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _increment {
            get {
                return this._incrementField;
            }
            set {
                if ((this._incrementField.Equals(value) != true)) {
                    this._incrementField = value;
                    this.RaisePropertyChanged("_increment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _machine {
            get {
                return this._machineField;
            }
            set {
                if ((this._machineField.Equals(value) != true)) {
                    this._machineField = value;
                    this.RaisePropertyChanged("_machine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short _pid {
            get {
                return this._pidField;
            }
            set {
                if ((this._pidField.Equals(value) != true)) {
                    this._pidField = value;
                    this.RaisePropertyChanged("_pid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _timestamp {
            get {
                return this._timestampField;
            }
            set {
                if ((this._timestampField.Equals(value) != true)) {
                    this._timestampField = value;
                    this.RaisePropertyChanged("_timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAircraftService")]
    public interface IAircraftService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/DoWork", ReplyAction="http://tempuri.org/IAircraftService/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/DoWork", ReplyAction="http://tempuri.org/IAircraftService/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllFlightParameters", ReplyAction="http://tempuri.org/IAircraftService/GetAllFlightParametersResponse")]
        FlightDataEntities.FlightParameters GetAllFlightParameters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllFlightParameters", ReplyAction="http://tempuri.org/IAircraftService/GetAllFlightParametersResponse")]
        System.Threading.Tasks.Task<FlightDataEntities.FlightParameters> GetAllFlightParametersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/InsertRawDataBatch", ReplyAction="http://tempuri.org/IAircraftService/InsertRawDataBatchResponse")]
        string InsertRawDataBatch(FlightDataEntities.RawDataBatch batchData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/InsertRawDataBatch", ReplyAction="http://tempuri.org/IAircraftService/InsertRawDataBatchResponse")]
        System.Threading.Tasks.Task<string> InsertRawDataBatchAsync(FlightDataEntities.RawDataBatch batchData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetCurrentAircraftModel", ReplyAction="http://tempuri.org/IAircraftService/GetCurrentAircraftModelResponse")]
        FlightDataEntities.AircraftModel GetCurrentAircraftModel();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetCurrentAircraftModel", ReplyAction="http://tempuri.org/IAircraftService/GetCurrentAircraftModelResponse")]
        System.Threading.Tasks.Task<FlightDataEntities.AircraftModel> GetCurrentAircraftModelAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAircraftServiceChannel : ConsoleApplication1.ServiceReference1.IAircraftService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AircraftServiceClient : System.ServiceModel.ClientBase<ConsoleApplication1.ServiceReference1.IAircraftService>, ConsoleApplication1.ServiceReference1.IAircraftService {
        
        public AircraftServiceClient() {
        }
        
        public AircraftServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AircraftServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AircraftServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AircraftServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public FlightDataEntities.FlightParameters GetAllFlightParameters() {
            return base.Channel.GetAllFlightParameters();
        }
        
        public System.Threading.Tasks.Task<FlightDataEntities.FlightParameters> GetAllFlightParametersAsync() {
            return base.Channel.GetAllFlightParametersAsync();
        }
        
        public string InsertRawDataBatch(FlightDataEntities.RawDataBatch batchData) {
            return base.Channel.InsertRawDataBatch(batchData);
        }
        
        public System.Threading.Tasks.Task<string> InsertRawDataBatchAsync(FlightDataEntities.RawDataBatch batchData) {
            return base.Channel.InsertRawDataBatchAsync(batchData);
        }
        
        public FlightDataEntities.AircraftModel GetCurrentAircraftModel() {
            return base.Channel.GetCurrentAircraftModel();
        }
        
        public System.Threading.Tasks.Task<FlightDataEntities.AircraftModel> GetCurrentAircraftModelAsync() {
            return base.Channel.GetCurrentAircraftModelAsync();
        }
    }
}
