//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18051
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 11.0.50727.1
// 
namespace AircraftDataAnalysisWinRT.AircraftService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AircraftModel", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class AircraftModel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CaptionField;
        
        private System.DateTime LastUsedField;
        
        private string ModelNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Caption {
            get {
                return this.CaptionField;
            }
            set {
                if ((object.ReferenceEquals(this.CaptionField, value) != true)) {
                    this.CaptionField = value;
                    this.RaisePropertyChanged("Caption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUsed {
            get {
                return this.LastUsedField;
            }
            set {
                if ((this.LastUsedField.Equals(value) != true)) {
                    this.LastUsedField = value;
                    this.RaisePropertyChanged("LastUsed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModelName {
            get {
                return this.ModelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelNameField, value) != true)) {
                    this.ModelNameField = value;
                    this.RaisePropertyChanged("ModelName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChartPanel", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities.Charts")]
    public partial class ChartPanel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string PanelIDField;
        
        private string PanelNameField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> ParameterIDsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PanelID {
            get {
                return this.PanelIDField;
            }
            set {
                if ((object.ReferenceEquals(this.PanelIDField, value) != true)) {
                    this.PanelIDField = value;
                    this.RaisePropertyChanged("PanelID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PanelName {
            get {
                return this.PanelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PanelNameField, value) != true)) {
                    this.PanelNameField = value;
                    this.RaisePropertyChanged("PanelName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> ParameterIDs {
            get {
                return this.ParameterIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterIDsField, value) != true)) {
                    this.ParameterIDsField = value;
                    this.RaisePropertyChanged("ParameterIDs");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Flight", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class Flight : object, System.ComponentModel.INotifyPropertyChanged {
        
        private AircraftDataAnalysisWinRT.AircraftService.AircraftInstance AircraftField;
        
        private int EndSecondField;
        
        private string FlightIDField;
        
        private string FlightNameField;
        
        private int StartSecondField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AircraftDataAnalysisWinRT.AircraftService.AircraftInstance Aircraft {
            get {
                return this.AircraftField;
            }
            set {
                if ((object.ReferenceEquals(this.AircraftField, value) != true)) {
                    this.AircraftField = value;
                    this.RaisePropertyChanged("Aircraft");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EndSecond {
            get {
                return this.EndSecondField;
            }
            set {
                if ((this.EndSecondField.Equals(value) != true)) {
                    this.EndSecondField = value;
                    this.RaisePropertyChanged("EndSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightID {
            get {
                return this.FlightIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightIDField, value) != true)) {
                    this.FlightIDField = value;
                    this.RaisePropertyChanged("FlightID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightName {
            get {
                return this.FlightNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightNameField, value) != true)) {
                    this.FlightNameField = value;
                    this.RaisePropertyChanged("FlightName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartSecond {
            get {
                return this.StartSecondField;
            }
            set {
                if ((this.StartSecondField.Equals(value) != true)) {
                    this.StartSecondField = value;
                    this.RaisePropertyChanged("StartSecond");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AircraftInstance", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class AircraftInstance : object, System.ComponentModel.INotifyPropertyChanged {
        
        private AircraftDataAnalysisWinRT.AircraftService.AircraftModel AircraftModelField;
        
        private string AircraftNumberField;
        
        private System.DateTime LastUsedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AircraftDataAnalysisWinRT.AircraftService.AircraftModel AircraftModel {
            get {
                return this.AircraftModelField;
            }
            set {
                if ((object.ReferenceEquals(this.AircraftModelField, value) != true)) {
                    this.AircraftModelField = value;
                    this.RaisePropertyChanged("AircraftModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AircraftNumber {
            get {
                return this.AircraftNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.AircraftNumberField, value) != true)) {
                    this.AircraftNumberField = value;
                    this.RaisePropertyChanged("AircraftNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUsed {
            get {
                return this.LastUsedField;
            }
            set {
                if ((this.LastUsedField.Equals(value) != true)) {
                    this.LastUsedField = value;
                    this.RaisePropertyChanged("LastUsed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LevelTopFlightRecord", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class LevelTopFlightRecord : object, System.ComponentModel.INotifyPropertyChanged {
        
        private float AvgValueField;
        
        private int CountField;
        
        private int EndSecondField;
        
        private System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.Level2FlightRecord> Level2FlightRecordField;
        
        private float MaxValueField;
        
        private int MaxValueSecondField;
        
        private float MinValueField;
        
        private int MinValueSecondField;
        
        private string ParameterIDField;
        
        private int StartSecondField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float AvgValue {
            get {
                return this.AvgValueField;
            }
            set {
                if ((this.AvgValueField.Equals(value) != true)) {
                    this.AvgValueField = value;
                    this.RaisePropertyChanged("AvgValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EndSecond {
            get {
                return this.EndSecondField;
            }
            set {
                if ((this.EndSecondField.Equals(value) != true)) {
                    this.EndSecondField = value;
                    this.RaisePropertyChanged("EndSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.Level2FlightRecord> Level2FlightRecord {
            get {
                return this.Level2FlightRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.Level2FlightRecordField, value) != true)) {
                    this.Level2FlightRecordField = value;
                    this.RaisePropertyChanged("Level2FlightRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MaxValue {
            get {
                return this.MaxValueField;
            }
            set {
                if ((this.MaxValueField.Equals(value) != true)) {
                    this.MaxValueField = value;
                    this.RaisePropertyChanged("MaxValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxValueSecond {
            get {
                return this.MaxValueSecondField;
            }
            set {
                if ((this.MaxValueSecondField.Equals(value) != true)) {
                    this.MaxValueSecondField = value;
                    this.RaisePropertyChanged("MaxValueSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MinValue {
            get {
                return this.MinValueField;
            }
            set {
                if ((this.MinValueField.Equals(value) != true)) {
                    this.MinValueField = value;
                    this.RaisePropertyChanged("MinValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinValueSecond {
            get {
                return this.MinValueSecondField;
            }
            set {
                if ((this.MinValueSecondField.Equals(value) != true)) {
                    this.MinValueSecondField = value;
                    this.RaisePropertyChanged("MinValueSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterID {
            get {
                return this.ParameterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterIDField, value) != true)) {
                    this.ParameterIDField = value;
                    this.RaisePropertyChanged("ParameterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartSecond {
            get {
                return this.StartSecondField;
            }
            set {
                if ((this.StartSecondField.Equals(value) != true)) {
                    this.StartSecondField = value;
                    this.RaisePropertyChanged("StartSecond");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Level2FlightRecord", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class Level2FlightRecord : object, System.ComponentModel.INotifyPropertyChanged {
        
        private float AvgValueField;
        
        private int CountField;
        
        private int EndSecondField;
        
        private System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.Level1FlightRecord> Level1FlightRecordsField;
        
        private float MaxValueField;
        
        private float MinValueField;
        
        private string ParameterIDField;
        
        private int StartSecondField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float AvgValue {
            get {
                return this.AvgValueField;
            }
            set {
                if ((this.AvgValueField.Equals(value) != true)) {
                    this.AvgValueField = value;
                    this.RaisePropertyChanged("AvgValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EndSecond {
            get {
                return this.EndSecondField;
            }
            set {
                if ((this.EndSecondField.Equals(value) != true)) {
                    this.EndSecondField = value;
                    this.RaisePropertyChanged("EndSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.Level1FlightRecord> Level1FlightRecords {
            get {
                return this.Level1FlightRecordsField;
            }
            set {
                if ((object.ReferenceEquals(this.Level1FlightRecordsField, value) != true)) {
                    this.Level1FlightRecordsField = value;
                    this.RaisePropertyChanged("Level1FlightRecords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MaxValue {
            get {
                return this.MaxValueField;
            }
            set {
                if ((this.MaxValueField.Equals(value) != true)) {
                    this.MaxValueField = value;
                    this.RaisePropertyChanged("MaxValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MinValue {
            get {
                return this.MinValueField;
            }
            set {
                if ((this.MinValueField.Equals(value) != true)) {
                    this.MinValueField = value;
                    this.RaisePropertyChanged("MinValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterID {
            get {
                return this.ParameterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterIDField, value) != true)) {
                    this.ParameterIDField = value;
                    this.RaisePropertyChanged("ParameterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartSecond {
            get {
                return this.StartSecondField;
            }
            set {
                if ((this.StartSecondField.Equals(value) != true)) {
                    this.StartSecondField = value;
                    this.RaisePropertyChanged("StartSecond");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Level1FlightRecord", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class Level1FlightRecord : object, System.ComponentModel.INotifyPropertyChanged {
        
        private float AvgValueField;
        
        private int FlightSecondField;
        
        private float MaxValueField;
        
        private float MinValueField;
        
        private string ParameterIDField;
        
        private decimal SumField;
        
        private int ValueCountField;
        
        private System.Collections.ObjectModel.ObservableCollection<float> ValuesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float AvgValue {
            get {
                return this.AvgValueField;
            }
            set {
                if ((this.AvgValueField.Equals(value) != true)) {
                    this.AvgValueField = value;
                    this.RaisePropertyChanged("AvgValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FlightSecond {
            get {
                return this.FlightSecondField;
            }
            set {
                if ((this.FlightSecondField.Equals(value) != true)) {
                    this.FlightSecondField = value;
                    this.RaisePropertyChanged("FlightSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MaxValue {
            get {
                return this.MaxValueField;
            }
            set {
                if ((this.MaxValueField.Equals(value) != true)) {
                    this.MaxValueField = value;
                    this.RaisePropertyChanged("MaxValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MinValue {
            get {
                return this.MinValueField;
            }
            set {
                if ((this.MinValueField.Equals(value) != true)) {
                    this.MinValueField = value;
                    this.RaisePropertyChanged("MinValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterID {
            get {
                return this.ParameterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterIDField, value) != true)) {
                    this.ParameterIDField = value;
                    this.RaisePropertyChanged("ParameterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Sum {
            get {
                return this.SumField;
            }
            set {
                if ((this.SumField.Equals(value) != true)) {
                    this.SumField = value;
                    this.RaisePropertyChanged("Sum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ValueCount {
            get {
                return this.ValueCountField;
            }
            set {
                if ((this.ValueCountField.Equals(value) != true)) {
                    this.ValueCountField = value;
                    this.RaisePropertyChanged("ValueCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<float> Values {
            get {
                return this.ValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ValuesField, value) != true)) {
                    this.ValuesField = value;
                    this.RaisePropertyChanged("Values");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DecisionRecord", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class DecisionRecord : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DecisionDescriptionField;
        
        private string DecisionIDField;
        
        private string DecisionNameField;
        
        private int EndSecondField;
        
        private int StartSecondField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DecisionDescription {
            get {
                return this.DecisionDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DecisionDescriptionField, value) != true)) {
                    this.DecisionDescriptionField = value;
                    this.RaisePropertyChanged("DecisionDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DecisionID {
            get {
                return this.DecisionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.DecisionIDField, value) != true)) {
                    this.DecisionIDField = value;
                    this.RaisePropertyChanged("DecisionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DecisionName {
            get {
                return this.DecisionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DecisionNameField, value) != true)) {
                    this.DecisionNameField = value;
                    this.RaisePropertyChanged("DecisionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EndSecond {
            get {
                return this.EndSecondField;
            }
            set {
                if ((this.EndSecondField.Equals(value) != true)) {
                    this.EndSecondField = value;
                    this.RaisePropertyChanged("EndSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartSecond {
            get {
                return this.StartSecondField;
            }
            set {
                if ((this.StartSecondField.Equals(value) != true)) {
                    this.StartSecondField = value;
                    this.RaisePropertyChanged("StartSecond");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FlightParameters", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class FlightParameters : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int BytesCountField;
        
        private System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.FlightParameter> ParametersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BytesCount {
            get {
                return this.BytesCountField;
            }
            set {
                if ((this.BytesCountField.Equals(value) != true)) {
                    this.BytesCountField = value;
                    this.RaisePropertyChanged("BytesCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.FlightParameter> Parameters {
            get {
                return this.ParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersField, value) != true)) {
                    this.ParametersField = value;
                    this.RaisePropertyChanged("Parameters");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FlightParameter", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class FlightParameter : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.ByteIndex> ByteIndexesField;
        
        private string CaptionField;
        
        private int IndexField;
        
        private bool IsConcernedField;
        
        private string ModelNameField;
        
        private string ParameterDataTypeField;
        
        private string ParameterIDField;
        
        private int SubIndexField;
        
        private string UnitField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.ByteIndex> ByteIndexes {
            get {
                return this.ByteIndexesField;
            }
            set {
                if ((object.ReferenceEquals(this.ByteIndexesField, value) != true)) {
                    this.ByteIndexesField = value;
                    this.RaisePropertyChanged("ByteIndexes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Caption {
            get {
                return this.CaptionField;
            }
            set {
                if ((object.ReferenceEquals(this.CaptionField, value) != true)) {
                    this.CaptionField = value;
                    this.RaisePropertyChanged("Caption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Index {
            get {
                return this.IndexField;
            }
            set {
                if ((this.IndexField.Equals(value) != true)) {
                    this.IndexField = value;
                    this.RaisePropertyChanged("Index");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConcerned {
            get {
                return this.IsConcernedField;
            }
            set {
                if ((this.IsConcernedField.Equals(value) != true)) {
                    this.IsConcernedField = value;
                    this.RaisePropertyChanged("IsConcerned");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModelName {
            get {
                return this.ModelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelNameField, value) != true)) {
                    this.ModelNameField = value;
                    this.RaisePropertyChanged("ModelName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterDataType {
            get {
                return this.ParameterDataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterDataTypeField, value) != true)) {
                    this.ParameterDataTypeField = value;
                    this.RaisePropertyChanged("ParameterDataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterID {
            get {
                return this.ParameterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterIDField, value) != true)) {
                    this.ParameterIDField = value;
                    this.RaisePropertyChanged("ParameterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SubIndex {
            get {
                return this.SubIndexField;
            }
            set {
                if ((this.SubIndexField.Equals(value) != true)) {
                    this.SubIndexField = value;
                    this.RaisePropertyChanged("SubIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitField, value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ByteIndex", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class ByteIndex : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IndexField;
        
        private System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.BitIndex> SubIndexesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Index {
            get {
                return this.IndexField;
            }
            set {
                if ((this.IndexField.Equals(value) != true)) {
                    this.IndexField = value;
                    this.RaisePropertyChanged("Index");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.BitIndex> SubIndexes {
            get {
                return this.SubIndexesField;
            }
            set {
                if ((object.ReferenceEquals(this.SubIndexesField, value) != true)) {
                    this.SubIndexesField = value;
                    this.RaisePropertyChanged("SubIndexes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BitIndex", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class BitIndex : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int SubIndexField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SubIndex {
            get {
                return this.SubIndexField;
            }
            set {
                if ((this.SubIndexField.Equals(value) != true)) {
                    this.SubIndexField = value;
                    this.RaisePropertyChanged("SubIndex");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FlightRawData", Namespace="http://schemas.datacontract.org/2004/07/FlightDataEntities")]
    public partial class FlightRawData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ParameterIDField;
        
        private int SecondField;
        
        private System.Collections.ObjectModel.ObservableCollection<float> ValuesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterID {
            get {
                return this.ParameterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterIDField, value) != true)) {
                    this.ParameterIDField = value;
                    this.RaisePropertyChanged("ParameterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Second {
            get {
                return this.SecondField;
            }
            set {
                if ((this.SecondField.Equals(value) != true)) {
                    this.SecondField = value;
                    this.RaisePropertyChanged("Second");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<float> Values {
            get {
                return this.ValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ValuesField, value) != true)) {
                    this.ValuesField = value;
                    this.RaisePropertyChanged("Values");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AircraftService.IAircraftService")]
    public interface IAircraftService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllChartPanels", ReplyAction="http://tempuri.org/IAircraftService/GetAllChartPanelsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.ChartPanel>> GetAllChartPanelsAsync(AircraftDataAnalysisWinRT.AircraftService.AircraftModel aircraftModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetLevelTopFlightRecords", ReplyAction="http://tempuri.org/IAircraftService/GetLevelTopFlightRecordsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.LevelTopFlightRecord>> GetLevelTopFlightRecordsAsync(AircraftDataAnalysisWinRT.AircraftService.Flight flight, System.Collections.ObjectModel.ObservableCollection<string> parameterIds, bool withLevel1Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/AddOrUpdateDecisionRecords", ReplyAction="http://tempuri.org/IAircraftService/AddOrUpdateDecisionRecordsResponse")]
        System.Threading.Tasks.Task<string> AddOrUpdateDecisionRecordsAsync(AircraftDataAnalysisWinRT.AircraftService.Flight flight, System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.DecisionRecord> records);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetAllFlightParameters", ReplyAction="http://tempuri.org/IAircraftService/GetAllFlightParametersResponse")]
        System.Threading.Tasks.Task<AircraftDataAnalysisWinRT.AircraftService.FlightParameters> GetAllFlightParametersAsync(AircraftDataAnalysisWinRT.AircraftService.AircraftModel aircraftModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetFlightData", ReplyAction="http://tempuri.org/IAircraftService/GetFlightDataResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.KeyValuePair<string, System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.FlightRawData>>>> GetFlightDataAsync(AircraftDataAnalysisWinRT.AircraftService.Flight flight, System.Collections.ObjectModel.ObservableCollection<string> parameterIds, int startSecond, int endSecond);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/InsertRawDataBatch", ReplyAction="http://tempuri.org/IAircraftService/InsertRawDataBatchResponse")]
        System.Threading.Tasks.Task<string> InsertRawDataBatchAsync(AircraftDataAnalysisWinRT.AircraftService.Flight flight, System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.Level1FlightRecord> batchData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAircraftService/GetCurrentAircraftModel", ReplyAction="http://tempuri.org/IAircraftService/GetCurrentAircraftModelResponse")]
        System.Threading.Tasks.Task<AircraftDataAnalysisWinRT.AircraftService.AircraftModel> GetCurrentAircraftModelAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAircraftServiceChannel : AircraftDataAnalysisWinRT.AircraftService.IAircraftService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AircraftServiceClient : System.ServiceModel.ClientBase<AircraftDataAnalysisWinRT.AircraftService.IAircraftService>, AircraftDataAnalysisWinRT.AircraftService.IAircraftService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AircraftServiceClient() : 
                base(AircraftServiceClient.GetDefaultBinding(), AircraftServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IAircraftService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AircraftServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(AircraftServiceClient.GetBindingForEndpoint(endpointConfiguration), AircraftServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AircraftServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AircraftServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AircraftServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AircraftServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AircraftServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.ChartPanel>> GetAllChartPanelsAsync(AircraftDataAnalysisWinRT.AircraftService.AircraftModel aircraftModel) {
            return base.Channel.GetAllChartPanelsAsync(aircraftModel);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.LevelTopFlightRecord>> GetLevelTopFlightRecordsAsync(AircraftDataAnalysisWinRT.AircraftService.Flight flight, System.Collections.ObjectModel.ObservableCollection<string> parameterIds, bool withLevel1Data) {
            return base.Channel.GetLevelTopFlightRecordsAsync(flight, parameterIds, withLevel1Data);
        }
        
        public System.Threading.Tasks.Task<string> AddOrUpdateDecisionRecordsAsync(AircraftDataAnalysisWinRT.AircraftService.Flight flight, System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.DecisionRecord> records) {
            return base.Channel.AddOrUpdateDecisionRecordsAsync(flight, records);
        }
        
        public System.Threading.Tasks.Task<AircraftDataAnalysisWinRT.AircraftService.FlightParameters> GetAllFlightParametersAsync(AircraftDataAnalysisWinRT.AircraftService.AircraftModel aircraftModel) {
            return base.Channel.GetAllFlightParametersAsync(aircraftModel);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.KeyValuePair<string, System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.FlightRawData>>>> GetFlightDataAsync(AircraftDataAnalysisWinRT.AircraftService.Flight flight, System.Collections.ObjectModel.ObservableCollection<string> parameterIds, int startSecond, int endSecond) {
            return base.Channel.GetFlightDataAsync(flight, parameterIds, startSecond, endSecond);
        }
        
        public System.Threading.Tasks.Task<string> InsertRawDataBatchAsync(AircraftDataAnalysisWinRT.AircraftService.Flight flight, System.Collections.ObjectModel.ObservableCollection<AircraftDataAnalysisWinRT.AircraftService.Level1FlightRecord> batchData) {
            return base.Channel.InsertRawDataBatchAsync(flight, batchData);
        }
        
        public System.Threading.Tasks.Task<AircraftDataAnalysisWinRT.AircraftService.AircraftModel> GetCurrentAircraftModelAsync() {
            return base.Channel.GetCurrentAircraftModelAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAircraftService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAircraftService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:45240/AircraftService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return AircraftServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IAircraftService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return AircraftServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IAircraftService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IAircraftService,
        }
    }
}
